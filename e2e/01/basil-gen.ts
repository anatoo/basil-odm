/**
 * This file was generated by Basil ODM
 * Do not make changes to this file directly
 */
/* eslint-disable */
import * as $$mongodb from "mongodb";
import * as $$basil from "../../src";

export class BlogEntry extends $$basil.Base {
  constructor(params?: Partial<BlogEntry>) {
    super();
    Object.assign(this, params);
  }
  static getRuntimeSchema(): $$basil.RuntimeCollectionSchema<
    BlogEntry,
    { user: User }
  > {
    return {
      collectionName: "blogEntries",
      fields: new $$basil.FieldsSchema({
        kind: "object",
        props: {
          _id: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "objectId",
            },
          },
          title: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "string",
            },
          },
          content: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "string",
            },
          },
          createdAt: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "date",
            },
          },
          userId: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "objectId",
            },
          },
        },
        allowAdditionalProps: false,
      }),
      indexes: [
        {
          fields: {
            createdAt: -1,
          },
          options: {},
        },
      ] as const,
      options: {},
      edges: {
        user: {
          type: "hasOne" as const,
          collection: User,
          referenceField: "userId",
        },
      },
    };
  }
  _id: $$mongodb.ObjectId = new $$mongodb.ObjectId();
  title: string = "";
  content: string = "";
  createdAt: Date = new Date();
  userId: $$mongodb.ObjectId = new $$mongodb.ObjectId();
}

export class User extends $$basil.Base {
  constructor(params?: Partial<User>) {
    super();
    Object.assign(this, params);
  }
  static getRuntimeSchema(): $$basil.RuntimeCollectionSchema<
    User,
    { blogEntries: BlogEntry[] }
  > {
    return {
      collectionName: "users",
      fields: new $$basil.FieldsSchema({
        kind: "object",
        props: {
          _id: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "objectId",
            },
          },
          name: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "string",
            },
          },
          status: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "enum",
              values: {
                ACTIVE: "active",
                INACTIVE: "inactive",
              },
              name: "UserStatus",
            },
          },
        },
        allowAdditionalProps: false,
      }),
      indexes: [] as const,
      options: {},
      edges: {
        blogEntries: {
          type: "hasMany" as const,
          collection: BlogEntry,
          referenceField: "userId",
        },
      },
    };
  }
  _id: $$mongodb.ObjectId = new $$mongodb.ObjectId();
  name: string = "";
  status: "active" | "inactive" = "active";
}

export const UserStatus = { ACTIVE: "active", INACTIVE: "inactive" } as const;
export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus];

const $$db: {
  blogEntries: $$basil.BasilCollection<BlogEntry, { user: User }>;
  users: $$basil.BasilCollection<User, { blogEntries: BlogEntry[] }>;
} = {
  blogEntries: new $$basil.BasilCollection<BlogEntry, { user: User }>(() => ({
    collectionName: "blogEntries",
    fields: new $$basil.FieldsSchema({
      kind: "object",
      props: {
        _id: {
          kind: "field",
          isOptional: false,
          node: {
            kind: "objectId",
          },
        },
        title: {
          kind: "field",
          isOptional: false,
          node: {
            kind: "string",
          },
        },
        content: {
          kind: "field",
          isOptional: false,
          node: {
            kind: "string",
          },
        },
        createdAt: {
          kind: "field",
          isOptional: false,
          node: {
            kind: "date",
          },
        },
        userId: {
          kind: "field",
          isOptional: false,
          node: {
            kind: "objectId",
          },
        },
      },
      allowAdditionalProps: false,
    }),
    Entity: BlogEntry,
    indexes: [
      {
        fields: {
          createdAt: -1,
        },
        options: {},
      },
    ] as const,
    options: {},
    edges: {
      user: {
        type: "hasOne" as const,
        collection: $$db["users"],
        referenceField: "userId",
      },
    },
  })),

  users: new $$basil.BasilCollection<User, { blogEntries: BlogEntry[] }>(
    () => ({
      collectionName: "users",
      fields: new $$basil.FieldsSchema({
        kind: "object",
        props: {
          _id: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "objectId",
            },
          },
          name: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "string",
            },
          },
          status: {
            kind: "field",
            isOptional: false,
            node: {
              kind: "enum",
              values: {
                ACTIVE: "active",
                INACTIVE: "inactive",
              },
              name: "UserStatus",
            },
          },
        },
        allowAdditionalProps: false,
      }),
      Entity: User,
      indexes: [] as const,
      options: {},
      edges: {
        blogEntries: {
          type: "hasMany" as const,
          collection: $$db["blogEntries"],
          referenceField: "userId",
        },
      },
    })
  ),
};

export default $$db;
