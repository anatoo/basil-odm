// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateDocumentTypes() #0 1`] = `
"export class Doc extends $$basil.Base {
    constructor(params?: Partial<Doc>) {
        super();
        Object.assign(this, params);
    }
    static getRuntimeSchema(): $$basil.RuntimeCollectionSchema<Doc, {}> {
        return {
            collectionName: "docs",
            fields: new $$basil.FieldsSchema({
                "kind": "object",
                "props": {
                    "_id": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "objectId"
                        }
                    },
                    "createdAt": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "date"
                        }
                    },
                    "flag": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "boolean"
                        }
                    },
                    "status": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "enum",
                            "values": {
                                "0": "created",
                                "1": "deleted"
                            }
                        }
                    },
                    "name": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "string"
                        }
                    },
                    "sub": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "object",
                            "props": {
                                "name": {
                                    "kind": "field",
                                    "isOptional": false,
                                    "node": {
                                        "kind": "string"
                                    }
                                }
                            },
                            "allowAdditionalProps": false
                        }
                    },
                    "record": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "record",
                            "item": {
                                "kind": "string"
                            }
                        }
                    }
                },
                "allowAdditionalProps": false
            }),
            indexes: [],
            options: {},
            edges: {},
        };
    }
    _id: $$mongodb.ObjectId = new $$mongodb.ObjectId();
    createdAt: Date = new Date();
    flag: boolean = false;
    status: "created" | "deleted" = "created";
    name: string = "";
    sub: {
        "name": string;
    } = {
        "name": "",
    };
    record: Record<string, string> = {};
}
"
`;

exports[`generateDocumentTypes() #1 1`] = `
"export class Doc extends $$basil.Base {
    constructor(params?: Partial<Doc>) {
        super();
        Object.assign(this, params);
    }
    static getRuntimeSchema(): $$basil.RuntimeCollectionSchema<Doc, {
        "user": User;
    }> {
        return {
            collectionName: "docs",
            fields: new $$basil.FieldsSchema({
                "kind": "object",
                "props": {
                    "_id": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "objectId"
                        }
                    },
                    "userId": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "objectId"
                        }
                    }
                },
                "allowAdditionalProps": false
            }),
            indexes: [],
            options: {},
            edges: { "user": {
                    type: "hasOne" as const,
                    entity: User,
                    referenceField: "userId"
                }, },
        };
    }
    _id: $$mongodb.ObjectId = new $$mongodb.ObjectId();
    userId: $$mongodb.ObjectId = new $$mongodb.ObjectId();
}
export class User extends $$basil.Base {
    constructor(params?: Partial<User>) {
        super();
        Object.assign(this, params);
    }
    static getRuntimeSchema(): $$basil.RuntimeCollectionSchema<User, {}> {
        return {
            collectionName: "users",
            fields: new $$basil.FieldsSchema({
                "kind": "object",
                "props": {
                    "_id": {
                        "kind": "field",
                        "isOptional": false,
                        "node": {
                            "kind": "objectId"
                        }
                    }
                },
                "allowAdditionalProps": false
            }),
            indexes: [],
            options: {},
            edges: {},
        };
    }
    _id: $$mongodb.ObjectId = new $$mongodb.ObjectId();
}
"
`;
